plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "1.0.14"
}


version = mod_version
group = mod_group_id

neoForge {
    version = neo_version
    accessTransformers {
        publish(project.file("src/main/resources/META-INF/accesstransformer.cfg"))
    }

    interfaceInjectionData {
        from(file("interfaces.json"))
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.INFO
        }

        client {
            client()
            jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
            gameDirectory = file 'run'
        }

        server {
            server()
            programArgument("--nogui")
            gameDirectory = file 'run_server'
        }
    }

    mods {
        powerfuljs {
            sourceSet sourceSets.main
        }
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url "https://maven.neoforged.net/releases"
    }

    maven {
        url "https://maven.architectury.dev/"
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }

    maven { url 'https://modmaven.dev/' }

    repositories {
        maven {
            url "https://cursemaven.com"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    api("dev.latvian.mods:rhino:$rhino_version") { transitive(false) }
    api("dev.latvian.mods:kubejs-neoforge:$kubejs_version")

    api("dev.latvian.mods:kubejs-mekanism-neoforge:$kubejs_mekanism_version")
    compileOnly("dev.architectury:architectury-neoforge:$architectury_version")

    implementation("curse.maven:probejs-585406:5651850")

    // Supported mods
    implementation "mekanism:Mekanism:1.21.1-${mekanism_version}"

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            kubejs_version  : kubejs_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

compileJava {
    options.encoding = "UTF-8"
    options.release.set(21)
    options.compilerArgs << '-parameters'
}

java {
    sourceCompatibility = targetCompatibility = '21'
    withSourcesJar()
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
